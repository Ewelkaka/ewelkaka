# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: your-app-name    # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: '.'      # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: '20.x'                # set this to the node version to use

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: npm install, build, and test
      run: |
        npm install
        npm run build --if-present
        npm run test --if-present

    - name: Upload artifact for deployment job
      uses: actions/upload-artifact@v4
      with:
        name: node-app
        path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Development'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
    - name: Download artifact from build job
      uses: actions/download-artifact@v4
      with:
        name: node-app

    - name: 'Deploy to Azure WebApp'
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
                    - name: Konfiguracja środowiska Node.js 
  używa: actions/setup-node@v3.9.1 
  z: 
    # Ustaw always-auth w npmrc. 
    always-auth: # opcjonalne, domyślnie false 
    # Specyfikacja wersji do użycia. Przykłady: 12.x, 10.15.1, >=10.15.0. 
    node-version: # opcjonalne 
    # Plik zawierający specyfikację wersji do użycia. Przykłady: .nvmrc, .node-version, .tool-versions. 
    node-version-file: # opcjonalne 
    # Docelowa architektura, której ma używać Node. Przykłady: x86, x64. Domyślnie użyje architektury systemu. 
    architecture: # opcjonalne 
    # Ustaw tę opcję, jeśli chcesz, aby akcja sprawdzała najnowszą dostępną wersję, która spełnia specyfikację wersji. 
    check-latest: # opcjonalne 
    # Opcjonalny rejestr do skonfigurowania dla uwierzytelniania. Ustawi rejestr w pliku .npmrc i .yarnrc na poziomie projektu i skonfiguruje uwierzytelnianie do odczytu z env.NODE_AUTH_TOKEN. 
    registry-url: # opcjonalny 
    # Opcjonalny zakres uwierzytelniania względem rejestrów o określonym zakresie. Wróci do właściciela repozytorium podczas korzystania z rejestru pakietów GitHub (https://npm.pkg.github.com/). 
    scope: # opcjonalny 
    # Służy do pobierania dystrybucji węzłów z node-versions. Ponieważ istnieje wartość domyślna, zwykle nie jest ona dostarczana przez użytkownika. Podczas uruchamiania tej akcji w github.com, wartość domyślna jest wystarczająca. Podczas uruchamiania w GHES, możesz przekazać osobisty token dostępu dla github.com, jeśli występuje ograniczenie przepustowości. 
    token: # opcjonalny, wartość domyślna to ${{ github.server_url == 'https://github.com' && github.token || '' }} 
    # Służy do określania menedżera pakietów do buforowania w domyślnym katalogu. Obsługiwane wartości: npm, yarn, pnpm. 
    cache: # opcjonalnie 
    # Służy do określania ścieżki do pliku zależności: package-lock.json, yarn.lock itd. Obsługuje symbole wieloznaczne lub listę nazw plików do buforowania wielu zależności. 
    cache-dependency-path: # opcjonalnie

          
